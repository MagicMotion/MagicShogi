// 2019 Team AobaZero
// This source code is in the public domain.
#ifdef _MSC_VER
#  define _CRT_SECURE_NO_WARNINGS
#endif
#include <algorithm>
#include <exception>
#include <random>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cinttypes>
using uint = unsigned int;
using uchar = unsigned char;
using std::max;
using std::terminate;
using std::mt19937_64;

class PF {
  FILE *_pf;
public:
  explicit PF(const char *p);
  ~PF();
  operator FILE *() const { return _pf; }
};

class Data {
  uint _u0, _u1, _u2;
public:
  Data() : _u0(0), _u1(0), _u2(0) {}
  explicit Data(uint u) : Data() { set_bit(u); }
  void set_bit(uint u);
  void set_bit(int r, int f);
  void out(const char *head, FILE *pf, const char *tail);
};

static void out_zkey() noexcept;
static void out_sq() noexcept;
static void out_bmap() noexcept;
static void out_board() noexcept;

int main() {
  out_zkey();
  out_sq();
  out_bmap();
  out_board();
  return 0;
}

PF::PF(const char *p) {
  assert(p);
  _pf = fopen(p, "w");
  if (!_pf) { perror("fopen() failed"); terminate(); }
  fputs("// This is generated by src/gencode/gencode.cpp\n\n", _pf); }

PF::~PF() {
  if (ferror(_pf) || fclose(_pf)) { perror("write failed"); terminate(); } }

void Data::set_bit(uint u) {
  assert(u < 81U);
  if      (u < 27U) _u0 |= 1U << (26U - u);
  else if (u < 54U) _u1 |= 1U << (53U - u);
  else              _u2 |= 1U << (80U - u); }

void Data::set_bit(int r, int f) {
  if (r < 0 || 8 < r || f < 0